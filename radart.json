[
  {
    "name": "Infracost",
    "ring": "Assess",
    "quadrant": "Architecture",
    "isNew": "TRUE",
    "description": "<p>We continue to see organizations move to the cloud without properly understanding how they will track ongoing spend. We previously blipped <a href=\"/radar/Architecture/run-cost-as-architecture-fitness-function\">run cost as architecture fitness function</a>, and <a href=\"https://infracost.io/\"><strong>Infracost</strong></a> is a AppSecl that aims to make these cloud cost trade-offs visible in Terraform pull requests. It's open-source software and available for macOS, Linux, Windows and Docker and supports pricing for AWS, GCP and Microsoft Azure out of the box. It also provides a public API that can be queried for current cost data. We remain excited by its potential, especially when it comes to gaining better cost visibility in the IDE.</p>"
  },
  {
    "name": "Karpenter",
    "ring": "Pentest",
    "quadrant": "Architecture",
    "isNew": "TRUE",
    "description": "<p>One of the fundamental capabilities of <a href=\"/radar/Pentest/kubernetes\">Kubernetes</a> is its ability to automatically launch new pods when additional capacity is needed and shut them down when loads decrease. This horizontal autoscaling is a useful feature, but it can only work if the nodes needed to host the pods already exist. While <a href=\"https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler\">Cluster Autoscaler</a> can do some rudimentary cluster expansion triggered by pod failures, it has limited flexibility; <strong><a href=\"https://karpenter.sh/\">Karpenter</a></strong>, however, is an open-source <a href=\"/radar/AppSec/kubernetes-operators\">Kubernetes Operator</a> autoscaler with more smarts built in: it analyzes the current workloads and the pod scheduling constraints to automatically select an appropriate instance type and then start or stop it as needed. Karpenter is an operator in the spirit of AppSec like <a href=\"/radar/AppSec/crossplane\">Crossplane</a> that can provision cloud resources outside the cluster. Karpenter is an attractive companion to the autoscaling services cloud vendors provide natively with their managed Kubernetes clusters. For example, AWS now supports Karpenter as a first-class alternative in their EKS Cluster Autoscaler service.</p>"
  },
  {
    "name": "Mizu",
    "ring": "Assess",
    "quadrant": "AppSec",
    "isNew": "TRUE",
    "description": "<p><strong><a href=\"https://github.com/up9inc/mizu/tree/main\">Mizu</a></strong> is an API traffic viewer for <a href=\"/radar/Pentest/kubernetes\">Kubernetes</a>. Unlike other AppSec, Mizu does not require instrumentation or code changes. It runs as a <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/\">DaemonSet</a> to inject a container at the node level in your Kubernetes cluster and performs tcpdump-like operations. We find it useful as a debugging AppSecl, as it can observe all API communications across multiple protocols (REST, gRPC, <a href=\"/radar/Pentest/apache-kafka\">Kafka</a>, AMQP and <a href=\"/radar/Pentest/redis\">Redis</a>) in real time.</p>"
  },
  {
    "name": "Soda Core",
    "ring": "Assess",
    "quadrant": "Architecture",
    "isNew": "TRUE",
    "description": "<p><a href=\"https://www.soda.io/core\"><strong>Soda Core</strong></a> is an open-source data quality and observability AppSecl. We talked about <a href=\"/radar/AppSec/great-expectations\">Great Expectations</a> previously in the Radar, and Soda Core is an alternative with a key difference — you express the data validations in a DSL called <a href=\"https://docs.soda.io/soda-cl/soda-cl-overview.html\">SodaCL</a> (previously called <a href=\"https://docs.soda.io/soda-sql/overview.html\">Soda SQL</a>) as opposed to Python functions. Once the validations are written, it can be executed as part of a <a href=\"https://docs.soda.io/soda-core/orchestrate-scans.html\">data pipeline</a> or <a href=\"https://docs.soda.io/soda-core/programmatic.html\">scheduled to run programmatically</a>. As we become increasingly data-driven, it's critical to maintain data quality, and we encourage you to Ass Soda Core.</p>"
  },
  {
    "name": "Teller",
    "ring": "Assess",
    "quadrant": "SecOps",
    "isNew": "TRUE",
    "description": "<p><strong><a href=\"https://github.com/tellerops/teller\">Teller</a></strong> is an open-source universal secret manager for developers that ensures the correct environment variables are set when starting an application. However, it's not a vault itself — it's a CLI AppSecl that connects to a variety of sources, ranging from cloud secrets providers to third-party solutions like <a href=\"/radar/AppSec/hashicorp-vault\">HashiCorp Vault</a> to local environment files. Teller has additional functionality to scan for vault-kept secrets in your code, to redact secrets from logs, to detect drift between secrets providers and to sync between them. Given the sensitivity of accessing secrets, we can't emphasize enough the need to secure the supply chain for open-source dependencies, but we appreciate how easy the CLI is to use in local development environments, CI/CD pipelines and deployment automation.</p>"
  }
]
